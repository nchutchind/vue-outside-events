/**
 * vue-outside-events @ 2.0.0
 * A set of Vue 2.x/3.x directives to react to various events outside the specified element.
 * Copyright (c) 2017 Nicholas Hutchind <nicholas@hutchind.com>
 *
 * License: MIT
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var VueDemi = (function (VueDemi, Vue, VueCompositionAPI) {
  if (VueDemi.install) {
    return VueDemi
  }
  if (!Vue) {
    console.error('[vue-demi] no Vue instance found, please be sure to import `vue` before `vue-demi`.')
    return VueDemi
  }

  // Vue 2.7
  if (Vue.version.slice(0, 4) === '2.7.') {
    for (var key in Vue) {
      VueDemi[key] = Vue[key]
    }
    VueDemi.isVue2 = true
    VueDemi.isVue3 = false
    VueDemi.install = function () {}
    VueDemi.Vue = Vue
    VueDemi.Vue2 = Vue
    VueDemi.version = Vue.version
    VueDemi.warn = Vue.util.warn
    function createApp(rootComponent, rootProps) {
      var vm
      var provide = {}
      var app = {
        config: Vue.config,
        use: Vue.use.bind(Vue),
        mixin: Vue.mixin.bind(Vue),
        component: Vue.component.bind(Vue),
        provide: function (key, value) {
          provide[key] = value
          return this
        },
        directive: function (name, dir) {
          if (dir) {
            Vue.directive(name, dir)
            return app
          } else {
            return Vue.directive(name)
          }
        },
        mount: function (el, hydrating) {
          if (!vm) {
            vm = new Vue(Object.assign({ propsData: rootProps }, rootComponent, { provide: Object.assign(provide, rootComponent.provide) }))
            vm.$mount(el, hydrating)
            return vm
          } else {
            return vm
          }
        },
        unmount: function () {
          if (vm) {
            vm.$destroy()
            vm = undefined
          }
        },
      }
      return app
    }
    VueDemi.createApp = createApp
  }
  // Vue 2.6.x
  else if (Vue.version.slice(0, 2) === '2.') {
    if (VueCompositionAPI) {
      for (var key in VueCompositionAPI) {
        VueDemi[key] = VueCompositionAPI[key]
      }
      VueDemi.isVue2 = true
      VueDemi.isVue3 = false
      VueDemi.install = function () {}
      VueDemi.Vue = Vue
      VueDemi.Vue2 = Vue
      VueDemi.version = Vue.version
    } else {
      console.error('[vue-demi] no VueCompositionAPI instance found, please be sure to import `@vue/composition-api` before `vue-demi`.')
    }
  }
  // Vue 3
  else if (Vue.version.slice(0, 2) === '3.') {
    for (var key in Vue) {
      VueDemi[key] = Vue[key]
    }
    VueDemi.isVue2 = false
    VueDemi.isVue3 = true
    VueDemi.install = function () {}
    VueDemi.Vue = Vue
    VueDemi.Vue2 = undefined
    VueDemi.version = Vue.version
    VueDemi.set = function (target, key, val) {
      if (Array.isArray(target)) {
        target.length = Math.max(target.length, key)
        target.splice(key, 1, val)
        return val
      }
      target[key] = val
      return val
    }
    VueDemi.del = function (target, key) {
      if (Array.isArray(target)) {
        target.splice(key, 1)
        return
      }
      delete target[key]
    }
  } else {
    console.error('[vue-demi] Vue version ' + Vue.version + ' is unsupported.')
  }
  return VueDemi
})(
  (this.VueDemi = this.VueDemi || (typeof VueDemi !== 'undefined' ? VueDemi : {})),
  this.Vue || (typeof Vue !== 'undefined' ? Vue : undefined),
  this.VueCompositionAPI || (typeof VueCompositionAPI !== 'undefined' ? VueCompositionAPI : undefined)
);
;
;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue-demi')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vue-demi'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vueOutsideEvents = {}, global.VueDemi));
})(this, (function (exports, vueDemi) { 'use strict';

    function resolveUnref(r) {
        return typeof r === 'function'
            ? r()
            : vueDemi.unref(r);
    }
    const INVALID_CUSTOM_EVENT_MSG = `[v-event-outside]: Custom events must be provided an object containing a "name" string and a "handler" function.`;
    const logError = console.error !== undefined ? console.error : console.log;
    function getElementForRef(elRef) {
        var _a;
        const plain = resolveUnref(elRef);
        return (_a = plain === null || plain === void 0 ? void 0 : plain.$el) !== null && _a !== void 0 ? _a : plain;
    }
    const directiveHooks = {
        beforeMount: (vueDemi.isVue3 ? 'beforeMount' : 'bind'),
        unmounted: (vueDemi.isVue3 ? 'unmounted' : 'unbind'),
    };
    function toPascalCase(text) {
        return text.replace(/(^\w|-\w)/g, (text) => text.replace(/-/, "").toUpperCase());
    }
    function createEventOutside(eventName, directiveName) {
        const isCustom = eventName === 'custom';
        const composable = (target, handler, options = {}) => {
            const { name: evName, capture = false, jquery = false, extras } = options;
            if (!window)
                return;
            if (jquery && (typeof window.$ === 'undefined' && typeof window.jQuery === 'undefined')) {
                logError(`[v-event-outside]: jQuery events were specified but jQuery is not present in window.`);
                return;
            }
            if (isCustom && (!evName || evName.trim() === '')) {
                logError(INVALID_CUSTOM_EVENT_MSG);
            }
            const listener = (event) => {
                const el = getElementForRef(target);
                if (!el || el === event.target) {
                    return;
                }
                if (event.composed) {
                    if (event.composedPath().includes(el)) {
                        return;
                    }
                }
                else if (el.contains(event.target)) {
                    return;
                }
                handler(event, el, extras);
            };
            if (jquery) {
                window.jQuery(document).on(evName, listener);
            }
            else {
                document.addEventListener(evName !== null && evName !== void 0 ? evName : eventName, listener, { passive: true, capture });
            }
            return () => {
                if (jquery) {
                    window.jQuery(document).off(evName, listener);
                }
                else {
                    document.removeEventListener(evName !== null && evName !== void 0 ? evName : eventName, listener, { capture });
                }
            };
        };
        const directiveDataNameTmpl = `__vueXXX__`;
        let evName = eventName, directiveDataName = directiveDataNameTmpl.replace('XXX', toPascalCase(directiveName));
        const directive = {
            [directiveHooks.beforeMount](el, binding) {
                const capture = binding.modifiers.capture;
                const jquery = binding.modifiers.jquery;
                if (isCustom) {
                    if ((typeof binding.value !== 'object' || Array.isArray(binding.value)) ||
                        (binding.value.name === undefined || typeof binding.value.name !== 'string') ||
                        (binding.value.handler === undefined || typeof binding.value.handler !== 'function')) {
                        logError(INVALID_CUSTOM_EVENT_MSG);
                        return;
                    }
                    evName = binding.value.name;
                    directiveDataName = directiveDataNameTmpl.replace('XXX', `Custom${toPascalCase(evName)}`);
                }
                if (typeof binding.value === 'function') {
                    el[directiveDataName] = composable(el, binding.value, { capture, jquery, name: evName });
                }
                else if (typeof binding.value === 'object') {
                    let handler, options;
                    if (Array.isArray(binding.value)) {
                        [handler, options] = binding.value;
                    }
                    else {
                        ({ handler, options } = binding.value);
                    }
                    el[directiveDataName] = composable(el, handler, Object.assign({ capture, jquery, name: evName }, options));
                }
            },
            [directiveHooks.unmounted](el) {
                var _a, _b;
                let directiveDataName = directiveDataNameTmpl.replace('XXX', isCustom ? `Custom${toPascalCase(evName)}` : toPascalCase(directiveName));
                (_b = (_a = el)[directiveDataName]) === null || _b === void 0 ? void 0 : _b.call(_a);
            }
        };
        return {
            composable,
            directive
        };
    }

    const [clickOutsideEventName, clickOutsideName] = ['click', 'click-outside'];
    const { composable: useClickOutside, directive: vClickOutside } = createEventOutside(clickOutsideEventName, clickOutsideName);
    const [blurOutsideEventName, blurOutsideName] = ['focusout', 'blur-outside'];
    const { composable: useBlurOutside, directive: vBlurOutside } = createEventOutside(blurOutsideEventName, blurOutsideName);
    const [changeOutsideEventName, changeOutsideName] = ['change', 'change-outside'];
    const { composable: useChangeOutside, directive: vChangeOutside } = createEventOutside(changeOutsideEventName, changeOutsideName);
    const [dblclickOutsideEventName, dblclickOutsideName] = ['dblclick', 'dblclick-outside'];
    const { composable: useDblclickOutside, directive: vDblclickOutside } = createEventOutside(dblclickOutsideEventName, dblclickOutsideName);
    const [focusOutsideEventName, focusOutsideName] = ['focusin', 'focus-outside'];
    const { composable: useFocusOutside, directive: vFocusOutside } = createEventOutside(focusOutsideEventName, focusOutsideName);
    const [keydownOutsideEventName, keydownOutsideName] = ['keydown', 'keydown-outside'];
    const { composable: useKeydownOutside, directive: vKeydownOutside } = createEventOutside(keydownOutsideEventName, keydownOutsideName);
    const [keypressOutsideEventName, keypressOutsideName] = ['keypress', 'keypress-outside'];
    const { composable: useKeypressOutside, directive: vKeypressOutside } = createEventOutside(keypressOutsideEventName, keypressOutsideName);
    const [keyupOutsideEventName, keyupOutsideName] = ['keyup', 'keyup-outside'];
    const { composable: useKeyupOutside, directive: vKeyupOutside } = createEventOutside(keyupOutsideEventName, keyupOutsideName);
    const [mousedownOutsideEventName, mousedownOutsideName] = ['mousedown', 'mousedown-outside'];
    const { composable: useMousedownOutside, directive: vMousedownOutside } = createEventOutside(mousedownOutsideEventName, mousedownOutsideName);
    const [mousemoveOutsideEventName, mousemoveOutsideName] = ['mousemove', 'mousemove-outside'];
    const { composable: useMousemoveOutside, directive: vMousemoveOutside } = createEventOutside(mousemoveOutsideEventName, mousemoveOutsideName);
    const [mouseoutOutsideEventName, mouseoutOutsideName] = ['mouseout', 'mouseout-outside'];
    const { composable: useMouseoutOutside, directive: vMouseoutOutside } = createEventOutside(mouseoutOutsideEventName, mouseoutOutsideName);
    const [mouseoverOutsideEventName, mouseoverOutsideName] = ['mouseover', 'mouseover-outside'];
    const { composable: useMouseoverOutside, directive: vMouseoverOutside } = createEventOutside(mouseoverOutsideEventName, mouseoverOutsideName);
    const [mouseupOutsideEventName, mouseupOutsideName] = ['mouseup', 'mouseup-outside'];
    const { composable: useMouseupOutside, directive: vMouseupOutside } = createEventOutside(mouseupOutsideEventName, mouseupOutsideName);
    const [selectOutsideEventName, selectOutsideName] = ['select', 'select-outside'];
    const { composable: useSelectOutside, directive: vSelectOutside } = createEventOutside(selectOutsideEventName, selectOutsideName);
    const [submitOutsideEventName, submitOutsideName] = ['submit', 'submit-outside'];
    const { composable: useSubmitOutside, directive: vSubmitOutside } = createEventOutside(submitOutsideEventName, submitOutsideName);
    const [customOutsideEventName, customOutsideName] = ['custom', 'event-outside'];
    const { composable: useCustomOutside, directive: vCustomOutside } = createEventOutside(customOutsideEventName, customOutsideName);
    const plugin = {
        install: (app) => {
            app.directive(clickOutsideName, vClickOutside);
            app.directive(blurOutsideName, vBlurOutside);
            app.directive(changeOutsideName, vChangeOutside);
            app.directive(dblclickOutsideName, vDblclickOutside);
            app.directive(focusOutsideName, vFocusOutside);
            app.directive(keydownOutsideName, vKeydownOutside);
            app.directive(keypressOutsideName, vKeypressOutside);
            app.directive(keyupOutsideName, vKeyupOutside);
            app.directive(mousedownOutsideName, vMousedownOutside);
            app.directive(mousemoveOutsideName, vMousemoveOutside);
            app.directive(mouseoutOutsideName, vMouseoutOutside);
            app.directive(mouseoverOutsideName, vMouseoverOutside);
            app.directive(mouseupOutsideName, vMouseupOutside);
            app.directive(selectOutsideName, vSelectOutside);
            app.directive(submitOutsideName, vSubmitOutside);
            app.directive(customOutsideName, vCustomOutside);
        }
    };

    exports.blurOutsideName = blurOutsideName;
    exports.changeOutsideName = changeOutsideName;
    exports.clickOutsideName = clickOutsideName;
    exports.customOutsideName = customOutsideName;
    exports.dblclickOutsideName = dblclickOutsideName;
    exports["default"] = plugin;
    exports.focusOutsideName = focusOutsideName;
    exports.keydownOutsideName = keydownOutsideName;
    exports.keypressOutsideName = keypressOutsideName;
    exports.keyupOutsideName = keyupOutsideName;
    exports.mousedownOutsideName = mousedownOutsideName;
    exports.mousemoveOutsideName = mousemoveOutsideName;
    exports.mouseoutOutsideName = mouseoutOutsideName;
    exports.mouseoverOutsideName = mouseoverOutsideName;
    exports.mouseupOutsideName = mouseupOutsideName;
    exports.selectOutsideName = selectOutsideName;
    exports.submitOutsideName = submitOutsideName;
    exports.useBlurOutside = useBlurOutside;
    exports.useChangeOutside = useChangeOutside;
    exports.useClickOutside = useClickOutside;
    exports.useCustomOutside = useCustomOutside;
    exports.useDblclickOutside = useDblclickOutside;
    exports.useFocusOutside = useFocusOutside;
    exports.useKeydownOutside = useKeydownOutside;
    exports.useKeypressOutside = useKeypressOutside;
    exports.useKeyupOutside = useKeyupOutside;
    exports.useMousedownOutside = useMousedownOutside;
    exports.useMousemoveOutside = useMousemoveOutside;
    exports.useMouseoutOutside = useMouseoutOutside;
    exports.useMouseoverOutside = useMouseoverOutside;
    exports.useMouseupOutside = useMouseupOutside;
    exports.useSelectOutside = useSelectOutside;
    exports.useSubmitOutside = useSubmitOutside;
    exports.vBlurOutside = vBlurOutside;
    exports.vChangeOutside = vChangeOutside;
    exports.vClickOutside = vClickOutside;
    exports.vCustomOutside = vCustomOutside;
    exports.vDblclickOutside = vDblclickOutside;
    exports.vFocusOutside = vFocusOutside;
    exports.vKeydownOutside = vKeydownOutside;
    exports.vKeypressOutside = vKeypressOutside;
    exports.vKeyupOutside = vKeyupOutside;
    exports.vMousedownOutside = vMousedownOutside;
    exports.vMousemoveOutside = vMousemoveOutside;
    exports.vMouseoutOutside = vMouseoutOutside;
    exports.vMouseoverOutside = vMouseoverOutside;
    exports.vMouseupOutside = vMouseupOutside;
    exports.vSelectOutside = vSelectOutside;
    exports.vSubmitOutside = vSubmitOutside;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
